{
  "name": "Mezu-framework",
  "tagline": "Mezu framework | A minimalistic Java based failsafe event driven framework",
  "body": "# Mezu framework\r\nA minimalistic Java based failsafe event driven framework\r\n\r\nBased on the amazing work of: *Hydrotoast*, check github profile at https://github.com/Hydrotoast\r\n\r\n## Event-Driven Programming\r\n\r\nMost programs and devices like a cellphone respond to events — things that happen. For example, you might move your mouse, and the computer responds. Or you click a button, and the program does something interesting. This is a very basic EDP framework for Java.\r\n\r\n## Features\r\n\r\n* Minimalistic Event driven framework.\r\n* Full code failsafe.\r\n* Full error handling using exception messages.\r\n* Stable, light and fast.\r\n\r\n## Description\r\n\r\nThis framework is built using pure Java and for starting using it you only need 3 things:\r\n\r\n* An event dispatcher (EbentDispatcher.class)\r\n* A dispatchable event (AbstractEvent.class)\r\n* An event handler (AbstractHandler.class)\r\n\r\nOnce you have declared your Event class and your Handler for that event you can link them on dispatcher. This is all you need to do to link a some kind of behaviour to an action.\r\n\r\n### Usage\r\n\r\n1. Create an `DemoEvent` class that inherits from `AbstractEvent`.\r\n\r\n  ```java\r\n  public class DemoEvent extends AbstractEvent {\r\n  \r\n      private String name;\r\n  \r\n      public DemoEvent(String name) {\r\n          this.name = name;\r\n      }\r\n  \r\n      public String getName() {\r\n          return name;\r\n      }\r\n  \r\n      public void setName(String name) {\r\n          this.name = name;\r\n      }\r\n  }\r\n  ```\r\n\r\n2. Create a `DemoHandler` class that inherits from `AbstractHandler`. This class must hold the logic that you want to do when receiving that type of event. In this case, is just a simple `println`on `name` variable.\r\n\r\n  ```java\r\n  public class DemoHandler extends AbstractHandler {\r\n  \r\n      @Override\r\n      public void dispatch(AbstractEvent message) {\r\n          DemoEvent demoEvent = (DemoEvent) message;\r\n          System.out.println(\"This message says: \" + demoEvent.getName());\r\n          System.out.println(\"Demo event successfully dispatched!\");\r\n      }\r\n  }\r\n  ```\r\n\r\n3. Register the created `DemoHandler` and link to that event. Link the handler to be executed when receiving a `DemoEvent` class message.\r\n\r\n  ```java\r\n  dispatcher.registerEventHandler(DemoEvent.class, new DemoHandler());\r\n  ```\r\n\r\n4. Dispatch a new `DemoEvent`event.\r\n\r\n  ```java\r\n  dispatcher.dispatch(new DemoEvent(\"Hello World!\"));\r\n  ```\r\n\r\n### Code example\r\n\r\nFull code example of event registestration, creation and dispatch is under `demo` folder. Here is the main code:\r\n\r\n  ```java\r\n  EbentDispatcher dispatcher = new EbentDispatcher();\r\n  try {\r\n      dispatcher.registerEventHandler(DemoEvent.class, new DemoHandler());\r\n      dispatcher.dispatch(new DemoEvent(\"Hello World!\"));\r\n  } catch (EventRegistrationException | NoValidHandlerException | EventDispatchException e) {\r\n      System.err.println(e.getMessage());\r\n  }\r\n  ```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}